blueprint:
  name: MIO - Doors and Windows Control
  description: "# Control of closing or opening doors and windows.\n\nFacilitates
    the execution of actions in the following cases:\n - When the doors or windows is opened
    (it is possible to delay the action **x seconds**).\n - While the doors
    or windows remains open (in **x minute** intervals).\n - When the doors
    or windows closes (it is possible to delay the action **x seconds**).\n\n\n

    **Version**: \n
    > - 1.0.0\n
    > - 1.1.0: Add presence sensor\n
    > - 1.1.1: Closing control is improved\n
    > - 1.2.0: Added option to execute the closing action, only when repetition has occurred\n\n

    **Documentation:** We're working on it, but I think it's pretty self-explanatory..."

  domain: automation
  source_url: https://github.com/EnriqueBesuman/blueprints/blob/main/door_and_window_control.yaml

  input:

    dispositivo:
      name: Doors or Windows
      description: "`required`\n\n 
        Door or Window to control"
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - binary_sensor
            device_class:
            - window
          - domain:
            - binary_sensor
            device_class:
            - door
          - domain:
            - binary_sensor
            device_class:
            - garage_door

    retraso_abrir:
      name: Delay **OPENING**
      description: "`optional`\n\n 
        Waiting time **in seconds**, from opening
        the door or window, until the action is executed"
      default: 0
      selector:
        number:
          min: 0.0
          max: 120.0
          unit_of_measurement: seconds
          mode: box
          step: 1.0

    accion_abrir:
      name: Opening actions
      description: "`optional`\n\n 
        Actions to be executed when the doors or/and windows is opened.\n\n
        For notification-type actions, the following variables are availables to compose the body of the message:\n\n 
        - ***{{ retraso_abrir }}***: Waiting time **in seconds**, from when the door or window is opened,
        until the action is executed.\n - ***{{ retraso_cerrar }}***: Timeout
        **in seconds**, from the moment the door or window is closed, until the action is executed.\n 
        - ***{{ intervalo_repeticion }}***: Interval **in minutes** between actions when the door or window remains open.\n"
      default: []
      selector:
        action: {}

    aviso_repetitivo:
      name: Execute **RECURSIVE** action while the door or window is open
      description: "`required`\n\n 
        Execute action every x time while the door or window remains open."
      default: false
      selector:
        boolean: {}

    intervalo_repeticion:
      name: Interval between iteration
      description: "`optional`\n\n 
        Interval **in minutes** between actions, when the door or window remains open."
      default: 5
      selector:
        number:
          min: 1.0
          max: 120.0
          unit_of_measurement: minutes
          mode: box
          step: 1.0

    accion_repeticion:
      name: Actions in each repetition
      description: "`optional`\n\n 
        Actions to be executed while the door or window remains open.\n\n
        For notification-type actions, they are availables the following variables to compose 
        the body of the message:\n\n 
        - ***{{retraso_abrir }}***: Waiting time **in seconds**, from when the door or window is opened,
        until the action is executed.\n 
        - ***{{ retraso_cerrar }}***: Time waiting time **in seconds**, from when the door or window is 
        closed, until
        executes the action.\n 
        - ***{{ intervalo_repeticion }}***: Interval **in minutes** between actions, when the door or 
        window remains open.\n 
        - ***{{ (tiempo_abierta }}***: Total time **in minutes** since the door was opened or
        window (not counting the delay in seconds when opening...)."
      default: []
      selector:
        action: {}

    retraso_cerrar:
      name: Delay **CLOSING**
      description: "`opcional`\n\n 
        Waiting time **in seconds**, from closing the door or window, until the action is executed."
      default: 0
      selector:
        number:
          min: 0.0
          max: 120.0
          unit_of_measurement: seconds
          mode: box
          step: 1.0

    accion_cerrar:
      name: Closing actions
      description: "`opcional`\n\n 
        Actions to be executed when the doors or/and windows is closed.\n\n
        For notification-type actions, the following variables are availables to compose 
        the body of the message:\n\n 
        - ***{{ retraso_abrir }}***: Waiting time **in seconds**, from when the door or window is opened,
        until the action is executed.\n - ***{{ retraso_cerrar }}***: Timeout
        **in seconds**, from the moment the door or window is closed, until the action is executed.\n 
        - ***{{ intervalo_repeticion }}***: Interval **in minutes** between actions when the door or 
        window remains open.\n"
      default: []
      selector:
        action: {}

    accion_cerrar_solo_rep:
      name: Run the close action only if a recursive action occurred
      description: "`required`\n\n 
        Run the close action only if a recursive action occurred. Possibly this option avoids unnecessary 
        or annoying actions..."
      default: false
      selector:
        boolean: {}

    presencia:
      name: "**PRESENCE** sensor"
      description: "`optional`\n\n 
        As long as the sensor detects presence, intermediate actions will not be executed.\n
        When the sensor stops detecting presence, the actions will resume (as long as the door or 
        window remains open, of course...)"
      default: []
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - binary_sensor
            device_class:
            - presence
          - domain:
            - binary_sensor
            device_class:
            - motion

variables:

  accion_abrir: !input accion_abrir
  accion_cerrar: !input accion_cerrar
  accion_repeticion: !input accion_repeticion
  aviso_repetitivo: !input aviso_repetitivo
  retraso_abrir: !input retraso_abrir
  retraso_cerrar: !input retraso_cerrar
  intervalo_repeticion: !input intervalo_repeticion
  presencia: !input presencia
  accion_cerrar_solo_rep: !input accion_cerrar_solo_rep
  tiempo_abierta: 0


trigger:

- id: abierta
  platform: state
  entity_id: !input dispositivo
  from: 'off'
  to: 'on'
  for: !input retraso_abrir
#- id: cerrada
#  platform: state
#  entity_id: !input dispositivo
#  from: 'on'
#  to: 'off'
#  for: !input retraso_cerrar


condition: []


action:

- choose:
  - alias: Trigger tanto con abierta como cerrada
    conditions:
      condition: trigger
      id: 
      - abierta
      - cerrada
    sequence:


    - choose:
      - alias: Ejecutar acción abierta si toca (y si hay)
        conditions:
        - condition: trigger
          id: 
          - abierta
        - condition: template
          value_template: >
            {{ accion_abrir is defined and accion_abrir|length > 0 }}
        sequence: !input accion_abrir


    - choose:
      - alias: Si está marcada acción recursiva (y si hay)
        conditions:
        - condition: template
          value_template: >
            {{ aviso_repetitivo }}                 
        - condition: template
          value_template: >
            {{ accion_repeticion is defined and accion_repeticion|length > 0 }}
        sequence:
        - alias: Iteramos hasta que se cierre
          repeat:
            sequence:
            - alias: Esperamos a que se cierre, a intervalos de x minutos
              wait_for_trigger:
              - platform: state
                entity_id: !input dispositivo
                to: 'off'
              timeout:
                minutes: !input intervalo_repeticion
            - alias: Informamos variable tiempo_abierta
              variables:
                tiempo_abierta: >
                  {{ (intervalo_repeticion |int(0) * repeat.index |int(0)) }}
            - if:
              - alias: Si después del intervalo aún no se ha cerrado, ejecutamos acción recursiva (si no presencia)
                condition: state
                entity_id: !input dispositivo
                state: 'on'
              then:
                choose:
                  conditions:
                  - or:
                    - condition: template
                      value_template: >
                        {{ not presencia }}
                    - condition: state
                      entity_id: !input presencia
                      state: "off"
                  sequence: !input accion_repeticion
              else:
              - alias: Si despues del intervalo se ha cerrado, ha habido repetición y está marcada la opción de acción cerrar solo si repetición (y si hay)
                choose:
                  conditions:
                  - condition: template
                    value_template: >
                      {{ accion_cerrar_solo_rep }}
                  - condition: template
                    value_template: >
                      {{ accion_cerrar is defined and accion_cerrar|length > 0 }}
                  sequence: !input accion_cerrar
            until:
            - condition: state
              entity_id: !input dispositivo
              state: 'off'


    - choose:
      - alias: Ejecutar acción cerrada si toca (y si hay) y NO está marcada la opción de acción cerrar solo si repetición
        conditions:
        - condition: template
          value_template: >
            {{ accion_cerrar is defined and accion_cerrar|length > 0 }}
        - condition: template
          value_template: >
            {{ not accion_cerrar_solo_rep }}
        - condition: state
          entity_id: !input dispositivo
          from: 'on'
          to: 'off'
          for: !input retraso_cerrar
        sequence: !input accion_cerrar
        
mode: single
