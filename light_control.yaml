blueprint:
  name: MIO - Light control 
  description: "Turns light on and off based on the following cases:\n\n
    > - When a **Binary Sensor** is activated (and based on an optional time offset).\n
    > - And/or When **Dawn or Dusk** (also based on an optional time lag, and the
    operating mode **Day or Night**).\n
    > - According to a certain level of **luminosity** (applies in any of the previous cases).\n\n\n
    **Version**: 1.0.0\n\n**Documentation:** We're working on it, but I think it's pretty self-explanatory..."
  domain: automation
  source_url: https://github.com/EnriqueBesuman/blueprints/blob/main/light_control.yaml
  input:
    luces:
      name: Light
      description: "`required`\n\n
        Light that will turn on or off."
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - light

    activador:
      name: Activator
      description: "`optional`\n\n
        Binary sensor that turns lights on or off (in addition to dawn or dusk,
        if selected)."
      default: []
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - binary_sensor
    solo_noche:
      name: Only at night
      description: ">`optional`\n\n 
        >Turns the lights on and off, only at night (regardless of dawn or dusk).\n
        >ONLY HAS EFFECT IF A BINARY SENSOR IS SELECTED."
      default: false
      selector:
        boolean: {}
    espera:
      name: "Waiting time on"
      description: ">`optional`\n\n 
        >Time the lights remain on since the sensor was last deactivated.\n
        >ONLY HAS EFFECT IF A BINARY SENSOR IS SELECTED."
      default: 00:01:00

    anochecer_amanecer:
      name: Dusk and dawn
      description: "`required`\n\n 
        Turns lights on and off, after dusk and before dawn (in addition to binary sensor, if selected)."
      default: false
      selector:
        boolean: {}
    modo:
      name: Operating mode
      description: ">`optional`\n\n 
        >In daytime mode, the lights will turn on at dawn and turn off at dusk.\n
        >In night mode, the lights will turn on at dusk, and turn off at dawn.\n
        >ONLY HAS EFFECT IF DUMP-DAWN IS CONSIDERED"
      default: day
      selector:
        select:
          options:
          - day
          - night
          multiple: false
          custom_value: false
    time_delay:
      name: Wait time
      description: ">`optional`\n\n 
        >Time lag with respect to sunrise for turning on or off.\n
        >Set negative to advance the start time and positive to delay it.\n
        >ONLY HAS EFFECT IF DUMP-DAWN IS CONSIDERED"
      default: 00:30:00
      selector:
        time: {}
    time_offset:
      name: Advance time
      description: ">`optional`\n\n
        >Time lag with respect to dusk for turning off or on.\n
        >Set negative to advance the start time and positive to delay it.\n
        >ONLY HAS EFFECT IF DUMP-DAWN IS CONSIDERED"
      default: '00:-30:00'
      selector:
        time: {}

    sensor_luminancia:
      name: Illuminance sensor
      description: "`optional`\n\n
        Illuminance measurement entity.\n
        IT HAS EFFECT IN ALL SCENARIOS."
      default: []
      selector:
        entity:
          multiple: false
          filter:
          - device_class:
            - illuminance
    luminancia:
      name: Maximum illuminance level (lux)
      description: ">`optional`\n\n
        >Maximum illuminance level (lux). If the measured illuminance is higher, the lights will not turn on.\n
        >ONLY HAS EFFECT IF A ILLUMINANCE SENSOR IS SELECTED."
      default: 300
      selector:
        number:
          min: 0
          max: 100000
          unit_of_measurement: lx
          mode: box
          step: 1
variables:

  activador: !input activador
  luces: !input luces
  anochecer_amanecer: !input anochecer_amanecer
  sensor_luminancia: !input sensor_luminancia
  luminancia: !input luminancia
  solo_noche: !input solo_noche

trigger:

- platform: state
  entity_id: !input activador
  to: 'off'
  for: !input espera
  id: activador_off
- platform: state
  entity_id: !input activador
  to: 'on'
  id: activador_on

- platform: sun
  event: sunrise
  offset: !input time_delay
  id: sunrise
- platform: sun
  event: sunset
  offset: !input time_offset
  id: sunset

condition:
  - condition: template
    value_template: >
      {{ (sensor_luminancia | length == 0) or
        (sensor_luminancia | length > 0 and
        states(sensor_luminancia) | float(0) <= luminancia | float(0)) }}

action:

  - if:
      - condition: trigger
        id:
          - sunrise
    then:
      - service: light.turn_{{ iif (modo == "day", "on", "off") }}
        target:
          entity_id: !input luces
  - if:
      - condition: trigger
        id:
          - sunset
    then:
      - service: light.turn_{{ iif (modo == "day", "off", "on") }}
        target:
          entity_id: !input luces

  - if:
      - condition: trigger
        id:
          - activador_off
          - activador_on
    then:
      - if:
          - condition: template
            value_template: >
              {{ ( not solo_noche) or 
              (solo_noche and state('sun.sun') == 'below_horizon') }}
        then:
          - service: light.turn_{{ states(activador) }}
            data:
              entity_id: '{{ luces }}'

mode: single
