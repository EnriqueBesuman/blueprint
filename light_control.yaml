blueprint:
  name: MIO - Lights Control 
  description: "Turns lights on and off based on the following scenes:\n\n
    > - **SENSOR MODE**:\n
    >> When one or more **Activators** (Binary Sensor) is activated. In this case, the operation is as follows:\n
    >> - The lights will turn on when ***ANY*** of the sensors are activated.\n
    >> - The lights will turn off when ***ALL*** sensors are deactivated.\n
    >> Optionally, a delay time can be indicated for turning off the lights (Only at night).\n
    >> Optionally, can be indicated turns the lights on and off, ONLY at night (Waiting time on).\n\n
    > - **NATURAL MODE**:\n
    >> Turns lights on and off at dawn or dusk, depending on the **Operating Mode**.\n
    >> Optionally, can be indicated a time lag with respect to sunrise or sunset.\n\n
    > - **NFC MODE**:\n
    >> The lights will turn on/off alternately when an NFC tag is read.\n\n
    > - **TO ALL MODES**:\n
    > The lights will turn on ONLY according to a certain level of **luminosity**.\n\n
    None of the modes are exclusive, so 1, 2 or 3 can be activated, as needed.\n\n\n

    **Version**: \n
    > - 1.0.5: Waiting time on as select time\n
    > - 1.0.6: Description and comments are improved\n
    > - 1.1.0: Solution to the problem of luminosity control\n
    > - 1.1.1: The problems with the luminancia_baja are solved\n
    > - 1.2.0: The bug that turns off the lights at dawn in sensor mode is resolved\n
    > - 1.2.1: Improve selecter filter activator\n\n
    **Documentation:** We're working on it, but I think it's pretty self-explanatory..."

  domain: automation
  source_url: https://github.com/EnriqueBesuman/blueprints/blob/main/light_control.yaml

  input:
  
    luces:
      name: Light
      description: "`required`\n\n
        Light that will turn on or off."
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - light


    modo_sensor:
      name: ACTIVATE **SENSOR MODE**.
      description: "`required`\n\n 
        Turns the lights on and off, depending on the **Binary Sensor** activators selected."
      default: false
      selector:
        boolean: {}
    activador:
      name: Activator
      description: ">`optional`\n\n
        >Binary sensor that turns lights on or off.\n
        >ONLY has effect (and it is MANDATORY) if **SENSOR MODE** is selected."
      default: []
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - binary_sensor
          - device_class: 
            - motion
    solo_noche_sensor:
      name: Only at night
      description: ">`optional`\n\n 
        >Turns the lights on and off, ONLY at night.\n
        >ONLY has effect if **SENSOR MODE** is selected."
      default: false
      selector:
        boolean: {}
    espera_sensor:
      name: "Waiting time on"
      description: ">`optional`\n\n 
        >Time the lights remain on since the sensor was last deactivated.\n
        >ONLY has effect if **SENSOR MODE** is selected."
      default: 00:01:00
      selector:
        time: {}
    modo_natural:
      name: ACTIVATE **NATURAL MODE**
      description: "`required`\n\n 
        Turns lights on and off, after dusk and before dawn."
      default: false
      selector:
        boolean: {}
    modo:
      name: Operating mode
      description: ">`optional`\n\n 
        >In daytime mode, the lights will turn on at dawn and turn off at dusk.\n
        >In night mode, the lights will turn on at dusk, and turn off at dawn.\n
        >ONLY has effect (and it is MANDATORY) if **NATURAL MODE** is selected."
      default: day
      selector:
        select:
          options:
          - label: day
            value: dia
          - label: night
            value: noche
          multiple: false
          custom_value: false
    time_delay:
      name: Wait time
      description: ">`optional`\n\n 
        >Time lag with respect to sunrise for turning on or off.\n
        >Set negative to advance the start time and positive to delay it.\n
        >ONLY has effect if **NATURAL MODE** is selected."
      default: 00:30:00
      selector:
        time: {}
    time_offset:
      name: Advance time
      description: ">`optional`\n\n
        >Time lag with respect to dusk for turning off or on.\n
        >Set negative to advance the start time and positive to delay it.\n
        >ONLY has effect if **NATURAL MODE** is selected."
      default: '00:-30:00'
      selector:
        time: {}


    modo_nfc:
      name: ACTIVATE **NFC MODE**
      description: "`required`\n\n 
        Turns the lights on and off alternately, depending on one or more selected **NFC Tags**."
      default: false
      selector:
        boolean: {}
    tag_id:
      name: Tag id
      description: ">`optional`\n\n
        >The tag ID of your NFC trigger.\n
        >Can be found under Settings --> NFC Tags and then click on the NFC Tag you want to choose.\n
        >ONLY has effect (and it is MANDATORY) if **NATURAL MODE** is selected."
      default: 
      selector:
        text:
          type: text


    sensor_luminancia:
      name: Illuminance sensor **TO ALL MODES**
      description: "`optional`\n\n
        Illuminance measurement entity.\n
        It has effect IN ALL SCENARIOS."
      default: []
      selector:
        entity:
          multiple: false
          filter:
          - device_class:
            - illuminance
    luminancia:
      name: Maximum illuminance level (lux)
      description: ">`optional`\n\n
        >Maximum illuminance level (lux). If the measured illuminance is higher, the lights will not turn on.\n
        >ONLY has effect (and it is MANDATORY) if an **ILLUMINANCE SENSOR** is selected."
      default: 300
      selector:
        number:
          min: 0
          max: 100000
          unit_of_measurement: lx
          mode: box
          step: 1


variables:

  activador: !input activador
  luces: !input luces
  modo_sensor: !input modo_sensor
  modo_natural: !input modo_natural
  modo_nfc: !input modo_nfc
  sensor_luminancia: !input sensor_luminancia
  luminancia: !input luminancia
  solo_noche_sensor: !input solo_noche_sensor
  modo: !input modo
  luminancia_baja: >
    {{ (sensor_luminancia | length == 0) or (sensor_luminancia | length > 0 and states(sensor_luminancia) | float(0) <= luminancia | float(0)) }}

trigger_variables:

  activador: !input activador


trigger:

- platform: template
  value_template: >
    {{ expand(activador) | selectattr('state', '==', 'on') | list | count > 0 }}
  id: activador_on
- platform: template
  value_template: >
    {{ expand(activador) | selectattr('state', '==', 'on') | list | count == 0 }}
  for: !input espera_sensor
  id: activador_off

- platform: sun
  event: sunrise
  offset: !input time_delay
  id: sunrise
- platform: sun
  event: sunset
  offset: !input time_offset
  id: sunset

- platform: tag
  tag_id: !input tag_id
  id: nfc


#condition:
#  - condition: template
#    value_template: >
#      {{ (sensor_luminancia | length == 0) or
#        (sensor_luminancia | length > 0 and
#        states(sensor_luminancia) | float(0) <= luminancia | float(0)) }}


action:

###
### MODO SENSOR
###

  - if:
      - condition: template
        value_template: >
          {{ (modo_sensor) }}
    then:
      - if:
          - condition: trigger
            id:
              - activador_on
        then:
          - if:
              - condition: template
                value_template: >
                  {{ ((not solo_noche_sensor) or 
                  (solo_noche_sensor and states('sun.sun') == 'below_horizon'))
                  and luminancia_baja }}
            then:
              - service: light.turn_on
                data:
                  entity_id: '{{ luces }}'
      - if:
          - condition: trigger
            id:
              - activador_off
        then:
          - service: light.turn_off
            data:
              entity_id: '{{ luces }}'

###
### MODO NATURAL
###

  - if:
      - condition: template
        value_template: >
          {{ (modo_natural) }}
    then:
      - if:
          - condition: trigger
            id:
              - sunrise
        then:
          - service: light.turn_{{ iif (modo == "dia" and luminancia_baja, "on", "off") }}
            data:
              entity_id: '{{ luces }}'
      - if:
          - condition: trigger
            id:
              - sunset
        then:
          - service: light.turn_{{ iif (modo == "noche" and luminancia_baja, "on", "off") }}
            data:
              entity_id: '{{ luces }}'

###
### MODO NFC
###

  - if:
      - condition: template
        value_template: >
          {{ (modo_nfc) }}
    then:
      - if:
          - condition: trigger
            id:
              - nfc
        then:
          - service: light.turn_{{ iif ( states(luces) == 'off' and luminancia_baja, "on", "off") }}
            data:
              entity_id: '{{ luces }}'


mode: single